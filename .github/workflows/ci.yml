name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run tests with coverage
        if: matrix.node-version == '20.x'
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for linting issues
        run: |
          echo "Linting check - Add ESLint configuration if needed"
          # Uncomment when ESLint is configured:
          # npm run lint

  security:
    name: Security audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  build:
    name: Build check
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify project structure
        run: |
          echo "Verifying project structure..."
          test -d lib || (echo "lib directory not found" && exit 1)
          test -d test || (echo "test directory not found" && exit 1)
          test -d examples || (echo "examples directory not found" && exit 1)
          test -f package.json || (echo "package.json not found" && exit 1)
          echo "Project structure verified successfully!"
      
      - name: Check for required files
        run: |
          echo "Checking for required files..."
          test -f lib/index.js || (echo "lib/index.js not found" && exit 1)
          test -f lib/managers/worker.js || (echo "worker.js not found" && exit 1)
          test -f lib/managers/process.js || (echo "process.js not found" && exit 1)
          test -f lib/managers/docker.js || (echo "docker.js not found" && exit 1)
          test -f lib/managers/k8s.js || (echo "k8s.js not found" && exit 1)
          echo "All required files present!"

  test-integration:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: test
    
    # Only run integration tests on main branch or PRs to main
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Docker
        run: |
          docker --version
          docker ps
      
      - name: Run unit tests (integration placeholder)
        run: |
          echo "Integration tests with Docker would run here"
          echo "Currently running unit tests as integration tests require Docker/K8s setup"
          npm test
          # Future: Add actual integration tests
          # npm run test:integration

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()
    
    steps:
      - name: Check workflow status
        run: |
          echo "Build Status: ${{ needs.test.result }}"
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Security Status: ${{ needs.security.result }}"
          echo "Build Check Status: ${{ needs.build.result }}"

concurrency:
  group: codeql-analysis-${{ github.ref }}
  cancel-in-progress: true
